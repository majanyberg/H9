import{head, is_null, List, Pair, set_head, tail} from './list'
import{ChainingHashtable, ch_empty, ch_insert, HashFunction, hash_id, ph_empty, ph_insert, probe_linear, probe_quadratic, ProbingHashtable} from './hashtables'
import { length, remove } from './list_prelude';
type People = List<Pair<number,string>>;
type Relations = List<Pair<number,number>>;
type Person = {
    id: number,
    name: string,
    parents: Array<number>,
    children: Array<number>
};
type PersonTable = ProbingHashtable<number, Person>;

function toHashtable(people: People, relations: Relations): PersonTable {
   //Skapa ett hashtable med ph_empty
   //Skapa nya personer
   //ph_insert den nya personen i ph_empty
   const hash_person: HashFunction<Person> = person => person.id;
   let hashtable = ph_empty(length(people), probe_linear(hash_person));

    function insert_person(people: People, relations: Relations, hashtables: ProbingHashtable<number,Person>): PersonTable {


        if(!is_null(people) && !is_null(relations)) {
            const person: Person = {id: head(head(people)),
                                    name:tail(head(people)),
                                    parents: Array[head(head(relations))],
                                    children: Array[tail(head(people))];

            };
            const new_hashtable = ph_insert(hashtables, person.id, person);
            insert_person(remove(head(people), people), remove(head(relations)), new_hashtable);
        }
        //const hashFunction: HashFunction<Person> = (person) => person.id;
  
        
    
    //return table;

    }

}
//the key is the birthdate of the person in format YYYYMMDD followed by a maximum of 7 digits
//
