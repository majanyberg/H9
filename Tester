
//Tests for toHashtable
test('PersonTable is defined', () => {
    expect(toHashtable(list_of_people, list_of_relations)).toBeDefined()
});

test('PersonTable contains the person.id of first element', () => {
    expect(toHashtable(list_of_people, list_of_relations)).toContain(19661125)
});

test('is correct length', () => {
        expect(toHashtable(list_of_people, list_of_relations)).toHaveLength(length(list_of_people))
});

test('PersonTable is indeed null', () => {
    expect(toHashtable(null, null)).toBeNull
});

test('toHashtable is called correctly', () => {
    expect(toHashtable(list_of_people, list_of_relations)).toBeCalled
});


//Tests for descendants

test('descendants is called correctly', () => {
    expect(descendants(toHashtable(list_of_people, list_of_relations), 19661125)).toBeCalled
});

test('descendants is defined', () => {
    expect(descendants(toHashtable(list_of_people, list_of_relations), 19661125)).toBeDefined
});
test('descendants returns correct descendant', () => {
    expect(descendants(toHashtable(list_of_people, list_of_relations), 19661125)).toContain([200107137440])
});

test('descendants returns undefined if id is not found', () => {
    expect(descendants(toHashtable(list_of_people, list_of_relations), 19671218)).toBeUndefined
});

test('descendants returns undefined if PersonTable is null', () => {
    expect(descendants(toHashtable(null, null), 19661125)).toBeUndefined
});

